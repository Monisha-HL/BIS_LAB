import numpy as np
import random
import math

cities = {
    0: (0, 0),//coordinates
    1: (1, 5),
    2: (5, 2),
    3: (6, 6),
    4: (8, 3)
}
num_cities = len(cities)

num_ants = 10
num_iterations = 20
alpha = 1.0       #pheromone importance
beta = 5.0        #distance importance
rho = 0.5         #evaporation rate
Q = 100           #pheromone deposit factor
initial_pheromone = 1.0

def euclidean(p1, p2):
    return math.hypot(p1[0] - p2[0], p1[1] - p2[1])

distance = np.zeros((num_cities, num_cities))
pheromone = np.ones((num_cities, num_cities)) * initial_pheromone

for i in range(num_cities):
    for j in range(num_cities):
        if i != j:
            distance[i][j] = euclidean(cities[i], cities[j])
        else:
            distance[i][j] = np.inf  #no self-loop

best_tour = None
best_length = float('inf')

for iteration in range(num_iterations):
    all_tours = []
    all_lengths = []

    for ant in range(num_ants):
        tour = []
        visited = set()
        current_city = random.randint(0, num_cities - 1)
        tour.append(current_city)
        visited.add(current_city)

        while len(tour) < num_cities:
            probabilities = []
            for next_city in range(num_cities):
                if next_city not in visited:
                    tau = pheromone[current_city][next_city] ** alpha
                    eta = (1.0 / distance[current_city][next_city]) ** beta
                    probabilities.append((next_city, tau * eta))
            total = sum(p[1] for p in probabilities)
            r = random.uniform(0, total)
            cumulative = 0
            for next_city, prob in probabilities:
                cumulative += prob
                if cumulative >= r:
                    tour.append(next_city)
                    visited.add(next_city)
                    current_city = next_city
                    break

        tour.append(tour[0]) 
        length = sum(distance[tour[i]][tour[i+1]] for i in range(num_cities))
        all_tours.append(tour)
        all_lengths.append(length)

        if length < best_length:
            best_length = length
            best_tour = tour

    pheromone *= (1 - rho)
    for tour, length in zip(all_tours, all_lengths):
        for i in range(num_cities):
            a = tour[i]
            b = tour[i + 1]
            pheromone[a][b] += Q / length
            pheromone[b][a] += Q / length  

print("Best tour found:", best_tour)
print("Tour length:", best_length)
